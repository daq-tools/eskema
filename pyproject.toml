[project]
name = "eskema"
version = "0.0.0"
description = "Infer SQL DDL statements from tabular data"
readme = "README.rst"
keywords = [
  "ddl",
  "inference",
  "introspection",
  "rdbms",
  "reflection",
  "schema",
  "schema-conversion",
  "sql",
  "sql-schema",
  "tabular-data",
]
license = { text = "MIT" }
authors = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]
requires-python = ">=3.6"
dependencies = [
  "crash",
  "crate[sqlalchemy]",
  "ddlgenerator",
  "sqlmakeuper",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Framework :: Pytest",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Financial and Insurance Industry",
  "Intended Audience :: Healthcare Industry",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Legal Industry",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Interpreters",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
[project.optional-dependencies]
develop = [
  "black<23",
  "poethepoet<0.19",
  "pyproject-fmt<0.6",
  "ruff==0.0.231",
  "validate-pyproject<0.12",
]
release = [
  "build<1",
  'minibump<1; python_version >= "3.10"',
  "twine<5",
]
test = [
  "coverage<8",
  "pytest<8",
]


[tool.black]
line-length = 120

[tool.coverage.run]
branch = false
# TODO: Improve this?
source = ["eskema"]

[tool.pytest.ini_options]
minversion = "2.0"
addopts = "-ra -q --verbosity=3 --doctest-modules --cov --cov-report=term-missing --cov-report=xml"
testpaths = [
  "eskema",
  "tests",
]
log_level = "DEBUG"
log_cli_level = "DEBUG"
xfail_strict = true


[tool.ruff]
line-length = 120

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]

[tool.ruff.per-file-ignores]
"eskema/core.py" = ["E402"]
"tests/*" = ["S101"]


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

test = { cmd = "pytest" }

format = [
  { cmd = "black ." },
  { cmd = "ruff --fix ." },
  { cmd = "pyproject-fmt pyproject.toml" },
]
lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
]

release = [
  { cmd = "minibump bump --relax minor" },
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*" },
]
